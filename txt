Coding Test: eCommerce Checkout Flow Simulation
Project Overview
You are tasked with building a 3-page mini eCommerce flow that simulates a real-world product
purchase journey, including:
● Landing Page
● Checkout Page
● Thank You Page

This project is designed to test your ability to manage:
● Frontend/backend interactions
● Dynamic form validations
● Database operations
● Transaction handling
● Email notification flows

Pages & Functional Requirements
Landing Page
Includes:
● Product Image
● Product Title
● Product Description
● Product Price
● Variant Selector (e.g., color, size)
● Quantity Selector
● “Buy Now” Button

Functionality:
● On clicking Buy Now, the user should be redirected to the Checkout Page.
● You may mock the product using:
○ Static JSON
○ Dummy API

○ Simple DB record

Checkout Page
Form Inputs:
● Full Name
● Email (validate format)
● Phone Number (validate format)
● Address
● City, State, Zip Code
● Card Number (16-digit validation)
● Expiry Date (must be a future date)
● CVV (3-digit validation)
Dynamic Order Summary Section
● Display product name, selected variant, quantity, subtotal, and total.
● Should dynamically reflect previous selections from Landing Page.

Transaction Simulation (Important)
Simulate the following outcomes:
● Approved Transaction
● Declined Transaction
● Gateway Error / Failure
On form submission:
● Store all input data and selected product
● Generate a unique order number
● Store everything in your database
● Update product inventory count
● Redirect to Thank You Page

Thank You Page

Display the following:
● Unique Order Number
● Full Order Summary
● All Customer Input Data
● Final Confirmation Message
Fetch data from your database, not browser storage
Order Confirmation Email (via Mailtrap.io)
Use https://mailtrap.io (sandbox mode) to simulate confirmation emails. Create a free Mailtrap
account to access your SMTP credentials.
Send:
● Approved Transaction Email
○ Order number, product info, customer info, confirmation message
● Declined/Failed Transaction Email
○ Notify customer that the transaction failed
○ Optionally provide retry or support instructions

Use separate templates and subject lines for each transaction outcome.

Tech Stack
You may use any of your preferred stack.
● Frontend:
○ React, Next.js, Vue, HTML + JS, etc.
● Backend:
○ Node.js (Express), PHP, Laravel, etc.
● Database:
○ MySQL, MongoDB, SQLite, PostgreSQL
● Email Service:

○ Mailtrap.io

UI Design: Clean and minimal is enough. Focus on functionality and user flow
accuracy.
Coding Test Submission Requirements
● Git Repository (Required):
Submit your complete project code via a public Git repository (GitHub, GitLab,
Bitbucket, etc.). Ensure that the repository is well-organized, with clear folder structure.
● Live Demo Link (Optional but Preferred):
Deploy your project on any free hosting service such as: Vercel Netlify Render Railway,
etc.
● Include the hosted link in your submission so we can experience the flow without setting
it up locally.

Reference for Simulation
Reference Site:
https://esalesone-test.myshopify.com/products/converse-chuck-taylor-all-star-ii-hi
Password: password
To simulate different outcomes:
● Enter 1 → ✅ Approved Transaction
● Enter 2 → ❌ Declined
● Enter 3 → ⚠️ Gateway Failure
● CVV: Any 3-digit number
● Expiry: Any date in the future

Evaluation Criteria
● Full flow simulation (with success & failure)
● Frontend form validation
● Clean code structure & modularity

● API and backend logic
● Database management
● Cart handling
● Confirmation email logic
● Curiosity & attention to detail
● Functional completeness



create me a proper promp for cursor ai to do the above job....
